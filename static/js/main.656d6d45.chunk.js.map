{"version":3,"sources":["componentes/NavbarCustom.jsx","componentes/JumbotronCustom.jsx","componentes/CarrouselCustom.jsx","componentes/FooterCustom.jsx","App.js","serviceWorker.js","index.js"],"names":["NavbarCustom","Navbar","fixed-top","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Component","JumbotronCustom","Jumbotron","fluid","Container","ListGroups","Carousel","Item","src","alt","FooterCustom","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sVAGqBA,E,iLAEb,OACI,kBAACC,EAAA,EAAD,CAAQC,YAAU,OAAOC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACvD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,mBACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACf,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,aAAf,YACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,UAAf,gB,GAT0BQ,a,gBCErBC,G,uLAEb,OACQ,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACL,UAAU,aAC3B,kBAACM,EAAA,EAAD,CAAWN,UAAU,WACjB,+CACA,6G,GANyBE,c,QCFxBK,E,iLAEb,OACI,kBAACC,EAAA,EAAD,KACA,kBAACA,EAAA,EAASC,KAAV,CAAeT,UAAU,QACvB,yBACEA,UAAU,gBACVU,IAAI,2DACJC,IAAI,iBAGR,kBAACH,EAAA,EAASC,KAAV,KACE,yBACET,UAAU,gBACVU,IAAI,4DACJC,IAAI,iBAGR,kBAACH,EAAA,EAASC,KAAV,KACE,yBACET,UAAU,gBACVU,IAAI,2DACJC,IAAI,sB,GAtBoBT,aCAnBU,G,uLAEb,OACI,yBAAKZ,UAAU,UACf,4BAAQK,MAAM,OAAOL,UAAU,sBAC3B,yBAAKA,UAAU,aACX,uBAAGA,UAAU,qBAAb,wD,GANsBE,cCgB3BW,MAXf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.656d6d45.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Nav, Navbar } from 'react-bootstrap'\r\n\r\nexport default class NavbarCustom extends Component {\r\n    render(){\r\n        return(\r\n            <Navbar fixed-top=\"true\" expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"#features\">Features</Nav.Link>\r\n                <Nav.Link href=\"#about\">About</Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n            </Navbar>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport{ Jumbotron, Container } from 'react-bootstrap'\r\nimport './JumbotronCustom.css'\r\n\r\n\r\nexport default class JumbotronCustom extends Component {\r\n    render(){\r\n        return(\r\n                <Jumbotron fluid className='jumbotron'>\r\n                <Container className='contain'>\r\n                    <h1>Welcome Budy!!!</h1>\r\n                    <p>\r\n                        This is a unique page about photos to the eyes calm down, then\r\n                        enjoy it.\r\n                    </p>\r\n                </Container>\r\n                </Jumbotron>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Carousel } from 'react-bootstrap'\r\n\r\nexport default class ListGroups extends Component {\r\n    render(){\r\n        return(\r\n            <Carousel>\r\n            <Carousel.Item className='item'>\r\n              <img\r\n                className=\"d-block w-100\"\r\n                src=\"https://picsum.photos/600/300?text=First slide&bg=373940\"\r\n                alt=\"First slide\"\r\n              />\r\n            </Carousel.Item>\r\n            <Carousel.Item>\r\n              <img\r\n                className=\"d-block w-100\"\r\n                src=\"https://picsum.photos/600/300?text=Second slide&bg=282c34\"\r\n                alt=\"Third slide\"\r\n              />\r\n            </Carousel.Item>\r\n            <Carousel.Item>\r\n              <img\r\n                className=\"d-block w-100\"\r\n                src=\"https://picsum.photos/600/300?text=Third slide&bg=282c34\"\r\n                alt=\"Third slide\"\r\n              />\r\n            </Carousel.Item>\r\n          </Carousel>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport './FooterCustom.css'\r\n\r\nexport default class FooterCustom extends Component {\r\n    render(){\r\n        return(\r\n            <div className='footer'>\r\n            <footer fluid=\"true\" className=\"footer text-center\">\r\n                <div className=\"container\">\r\n                    <p className=\"text-muted credit\">Copyright 2019 by Rogpe. All rights reserved.</p>\r\n                </div>\r\n            </footer>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport NavbarCustom from './componentes/NavbarCustom'\nimport JumbotronCustom from './componentes/JumbotronCustom'\nimport CarrouselCustom from './componentes/CarrouselCustom'\nimport FooterCustom from './componentes/FooterCustom'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavbarCustom />\n      <JumbotronCustom />\n      <CarrouselCustom />\n      <FooterCustom />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}